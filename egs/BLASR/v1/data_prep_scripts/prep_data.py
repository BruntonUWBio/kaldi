import glob
import argparse
import parameter_utils

parser = argparse.ArgumentParser(description='Creates text_test, wav_test.scp, utt2spp_test, and preseg_test from a compiled transcript file (generated by produce_combined_text.py')
parser.add_argument('--train', action='store_true',
    help='Preset for creating training data. Creates files from final_patient_train_data.txt')
parser.add_argument('--test', action='store_true',
    help='Preset for creating testing data. Creates files from final_patient_test_data.txt')

args = parser.parse_args()
args = parameter_utils.validate_test_train_args(args)

transcripts_root = parameter_utils.get_transcripts_root()

if (args.train):
    suffix = 'train'

else:
    suffix = 'test'

source_file_path = "%s/final_patient_%s_data.txt"%(transcripts_root, suffix)
text_file_path = "%s/text_%s"%(transcripts_root, suffix)
wav_file_path = "%s/wav_%s.scp"%(transcripts_root, suffix)
utt2spk_file_path = "%s/utt2spk_%s"%(transcripts_root, suffix)
pre_seg_file_path = "%s/preseg_%s"%(transcripts_root, suffix)

num_successfully_wrote = 0

with open(source_file_path, 'r') as source_fl, \
     open(text_file_path, 'w') as text_fl, \
     open(wav_file_path, 'w') as wav_fl, \
     open(utt2spk_file_path, 'w') as utt2spk_fl, \
     open(pre_seg_file_path, 'w') as pre_seg_fl:
    for (line_num, line) in enumerate(source_fl, 1):
        # A (hopefully obviously fake) line from the combined transcript txt file.
        # [AudioPath]/t0139310_9_09131.231-12303.123.wav   this is a totally bogus transcript

        if (line == "\n"):
            continue

        success = True

        ext_file_name = line.split()[0]
        transcript = " ".join(line.split()[1:])

        rec_id = ext_file_name.split('/')[-1].split('.wav')[0]
        spk_id = rec_id[:8]
        utt_id = rec_id

        if ext_file_name.count('_') == 2 or ext_file_name.count('_') == 3:
            split_numbers = ext_file_name.split('_')[-1]
        else:
            success = False
            print(" === Data does not conform to known standards === ")
            print(line_num)
            print(line)
            print("\n")
            # sys.exit("Data does not conform to known standards")

        start, end = split_numbers.split('-')
        end = end.split('.')[0] + '.' + end.split('.')[1]

        try:
            total_length = float(end) - float(start)
        except ValueError:
            success = False
            print(" === Data does not conform to known standards === ")
            print(line_num)
            print(line)
            print("\n")

        if (success):
            wav_fl.write(rec_id + '\t' + ext_file_name + '\n')
            text_fl.write(utt_id + '\t' + transcript + '\n')
            utt2spk_fl.write(utt_id + '\t' + spk_id + '\n')
            pre_seg_fl.write(utt_id + '\t' + rec_id + '\t' + '0.0' + '\t' + str(total_length) + '\n')
            num_successfully_wrote += 1

print("Successfully wrote %d lines to:"%(num_successfully_wrote))
print("\t%s"%(text_file_path))
print("\t%s"%(wav_file_path))
print("\t%s"%(utt2spk_file_path))
print("\t%s"%(pre_seg_file_path))
